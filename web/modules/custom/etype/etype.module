<?php

use Drupal\Core\Render\Element;
use Drupal\user\Entity\User;


/**
 * Implements hook_page_attachments().
 * css hides system login link.
 *
 * @param array $page
 */
function etype_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'etype/global-styling';
}

/**
 * {@inheritdoc}
 */
function etype_e_editions() {

  $logged_in = Drupal::currentUser()->isAuthenticated();
  $config = Drupal::config('etype.adminsettings');
  $e_edition = $config->get('etype_e_edition');
  $pub = $config->get('etype_pub');
  $ptype = $config->get('etype_ptype');

  $config = Drupal::config('system.site');
  $site = $config->get('name');

  /* because Lutcher has a comma */
  if (strpos($e_edition, '|') !== false) {
    $items = explode(',', $e_edition);
    $pubs = explode(',', $pub);
    $ptypes = explode(',', $ptype);
  } else {
    $items = [$e_edition];
    $pubs = [$pub];
    $ptypes = [$ptype];
  }

  $e_editions = [];
  $ptr = 0;
  foreach ($items as $item) {
    $arr = explode('|', $item);
    if (isset($arr[1])) {
      $site = trim($arr[1]);
    }

    $ar2 = preg_split("/ID[0-9]+/", $arr[0]); // make LandingImage directory name
    $imagedir = trim($ar2[0]);
    $e_editions[$ptr]['image'] = 'https://etypeservices.com/LandingPageImages/' . $imagedir . '/currentpg1.jpg';

    if (isset($pubs[$ptr])) {
      $pub = trim($pubs[$ptr]);
    }
    if (isset($ptypes[$ptr])) {
      $ptype = trim($ptypes[$ptr]);
    }
    $e_edition = trim($arr[0]);

    if ($logged_in > 0) {
      if (!empty ($pub)) {
        $account = Drupal\user\Entity\User::load(Drupal::currentUser()->id());
        $name = $account->get('name')->value;
        $path = 'https://etypeservices.com/ReadTheEdition.aspx?Username=' . $name . "&Pub=" . $pub . "&PType=" . $ptype;
      } else {
        $path = 'https://etypeservices.com/' . $e_edition . '/';
      }
    } else {
      $path = 'https://etypeservices.com/' . $e_edition . '/';
    }

    $e_editions[$ptr]['site_name'] = trim($site);
    $e_editions[$ptr]['path'] = $path;
    $ptr++;
  }
  return $e_editions;
}

/**
 * {@inheritdoc}
 */
function etype_menu_links_discovered_alter(&$links) {
  $e_editions = etype_e_editions();
  $links['etype.e_edition']['url'] = $e_editions[0]['path'];
}

/**
 * Split string on word boundary.
 *
 * {@inheritdoc}
 */
function substrwords($text, $maxchar, $end='...') {
  if (strlen($text) > $maxchar || $text == '') {
    $words = preg_split('/\s/', $text);
    $output = '';
    $i      = 0;
    while (1) {
      $length = strlen($output)+strlen($words[$i]);
      if ($length > $maxchar) {
        break;
      }
      else {
        $output .= " " . $words[$i];
        ++$i;
      }
    }
    $output .= $end;
  }
  else {
    $output = $text;
  }
  return $output;
}

/**
 * Helper function.
 *
 * @param $needles
 * @param $haystack
 * @return bool
 */
function in_array_any($needles, $haystack) {
  return (bool)(array_intersect($needles, $haystack));
}

/**
 * Implements hook_form_alter().
 */
function etype_form_alter(&$form, &$form_state, $form_id) {
  /* Set default author information. */
  if (!preg_match("/^node_delete.+$/", $form_id)) {
    if (preg_match("/^node_.+form$/", $form_id)) {
      $nid = $form_state->getformObject()->getEntity()->id();
      if (is_null($nid)) {
        /* only on new nodes */
        $config = Drupal::config('etype.adminsettings');
        $uid = $config->get('author');
        $user = Drupal::currentUser();
        $roles = $user->getRoles();
        if ($uid > 0 && in_array_any(['administrator', 'editor'], $roles)) {
          $author = User::load($uid);
          $name = $author->getAccountName();
          $form['#attached']['drupalSettings']['etype']['author'] = $name .  ' (' . $uid . ')';
          $form['#attached']['library'][] = 'etype/etype';
        }
      }
    }
  }
}

/*function etype_field_widget_form_alter(&$element, &$form_state, $context) {
  // If this is an image field type
  if (get_class($context['widget']) == "Drupal\image\Plugin\Field\FieldWidget\ImageWidget") {
    foreach (Element::children($element) as $key => $child) {
      kint($key);
      $elements[$key]['#process'][] = 'etype_image_field_widget_process';
    }
  }
}

function etype_image_field_widget_process($element, &$form_state, $form) {
  kint($element);
  // Change the title field to a textarea
  $element['alt']['#type'] = 'textarea';
  // Return the altered element
  return $element;
}*/
