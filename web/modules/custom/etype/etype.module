<?php

use Drupal\Core\Language\LanguageInterface;
use Drupal\file\Entity\File;
use Drupal\user\Entity\User;

/**
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function etype_theme($existing, $type, $theme, $path): array {
  return [
    'ada_compliance' => [
      'variables' => [],
      'template' => 'ada-compliance',
    ],
    'views_view_row_rss__news_rss_feed' => [
      'base hook' => 'view'
    ],
    'views_view_rss__mailchimp_feed' => [
      'base hook' => 'view'
    ],
    'views_view_row_rss__mailchimp_feed' => [
      'base hook' => 'view'
    ],
  ];
}

/**
 * Preprocess html.
 *
 * @param $variables
 */
function etype_preprocess_html(&$variables) {
  $config = Drupal::config('etype.adminsettings');
  $variables['head_script'] = $config->get('head_script');
  $variables['bottom_script'] = $config->get('bottom_script');
}

/**
 * Preprocess node.
 *
 * @param $variables
 */
function etype_preprocess_node(&$variables) {
  $config = Drupal::config('etype.adminsettings');
  $editions = etype_e_editions();
  $premium_content_message = $config->get('premium_content_message');
  $patterns = ["#login", "#subscribe"];
  $login_url = $editions[0]['login_link'];
  $login_url .= '?destination=' . $_SERVER['REQUEST_URI'];
  $replace = [$login_url, $editions[0]['sub_link']];
  $str = str_replace($patterns, $replace, $premium_content_message);
  $variables['premium_content_message'] = $str;
  $variables['premium_preview'] = $config->get('premium_preview');
}

/**
 * Implements hook_page_attachments().
 * css hides system login link.
 *
 * @param array $page
 */
function etype_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'etype/ada-compliance';
  $page['#attached']['library'][] = 'etype/global-styling';
  $moduleHandler = Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('pwa')) {
    $page['#attached']['library'][] = 'etype/addtohomescreen';
  }
}

/**
 * For ADA compliance, make sure images have alt & title tag.
 *
 * @param $variables
 */
function etype_preprocess_image(&$variables) {
  if (empty($variables['alt'])) {
    $variables['alt'] = "Article Image Alt Text";
  }
  if (empty($variables['title'])) {
    $variables['title'] = "Article Image Title Text";
  }
}

/**
 * Generates links and paths for use as image links, login urls. etc
 */
function etype_e_editions(): array {

  $v1_url = "https://etypeservices.com/";
  $host = Drupal::request()->getHost();
  $v2_url = 'https://' . $host . '/';
  $logged_in = Drupal::currentUser()->isAuthenticated();
  $config = Drupal::config('etype.adminsettings');

  $version = 'v1';
  $moduleHandler = Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('etype_login_v2')) {
    $version = 'v2';
  }
  if ($moduleHandler->moduleExists('etype_pico')) {
    $version = 'pico';
  }
  $e_edition = $config->get('etype_e_edition');
  $pub = $config->get('etype_pub');
  $ptype = $config->get('etype_ptype');

  $config = Drupal::config('system.site');
  $site = $config->get('name');

  /* because Lutcher has a comma */
  if (strpos($e_edition, '|') !== FALSE) {
    $items = explode(',', $e_edition);
    $pubs = explode(',', $pub);
    $ptypes = explode(',', $ptype);
  } else {
    $items = [$e_edition];
    $pubs = [$pub];
    $ptypes = [$ptype];
  }

  $e_editions = [];
  $ptr = 0;

  /* loop over publications attached to site, normally just one */
  foreach ($items as $item) {
    $arr = explode('|', $item);
    if (isset($arr[1])) {
      $site = trim($arr[1]);
    }

    if (isset($pubs[$ptr])) {
      $pub = trim($pubs[$ptr]);
    }
    if (isset($ptypes[$ptr])) {
      $ptype = trim($ptypes[$ptr]);
    }
    $e_edition = trim($arr[0]);

    switch ($version) {
      case 'v2':
        /* Thumbnail */
        $e_editions[$ptr]['image'] = 'https://etypeproductionstorage1.blob.core.windows.net/$web/Production_Prod/Publications/' . $pub . '/thumbnail.jpg';
        /* Account Links */
        $path = $v2_url . 'e-edition/'. $pub;
        $path_anon = $v2_url . 'e-edition/'. $pub;
        $sub_link = $v2_url . 'e-edition/'. $pub;
        $login_link = '/etype-login';
        break;

      case 'pico':
        /* Thumbnail */
        $e_editions[$ptr]['image'] = 'https://etypeproductionstorage1.blob.core.windows.net/$web/Production_Prod/Publications/' . $pub . '/thumbnail.jpg';
        /* Account Links */
        $path = $v2_url . 'e-edition';
        $path_anon = $v2_url . 'e-edition';
        $sub_link = $v2_url . 'pico-subscribe';
        $login_link = '';
        break;

      default;
        /* Thumbnail */
        $ar2 = preg_split("/ID[0-9]+/", $arr[0]);
        // make LandingImage directory name
        $imagedir = trim($ar2[0]);
        $e_editions[$ptr]['image'] = $v1_url . 'LandingPageImages/' . $imagedir . '/currentpg1.jpg';

        /* Account Links */
        if ($logged_in > 0) {
          $account = Drupal\user\Entity\User::load(Drupal::currentUser()->id());
          $name = $account->get('name')->value;
          $path = $v1_url . 'ReadTheEdition.aspx?Username=' . $name . "&Pub=" . $pub . "&PType=" . htmlspecialchars($ptype);
        } else {
          $path = $v1_url . $e_edition;
        }
        $path_anon = $v1_url . $e_edition;
        $sub_link = $v1_url . $e_edition . "/default.aspx?PubID=" . $pub;
        $login_link = '/etype-login';
    }

    $e_editions[$ptr]['site_name'] = trim($site);
    $e_editions[$ptr]['path'] = $path;
    $e_editions[$ptr]['path_anon'] = $path_anon;
    $e_editions[$ptr]['sub_link'] = $sub_link;
    $e_editions[$ptr]['login_link'] = $login_link;
    $e_editions[$ptr]['pubId'] = $pub;
    $ptr++;
  }
  return $e_editions;
}

/**
 * This sets up the logged out e-Edition path
 *
 * @param $links
 */
function etype_menu_links_discovered_alter(&$links) {
  $e_editions = etype_e_editions();
  $links['etype.e_edition']['url'] = $e_editions[0]['path_anon'];
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function etype_form_alter(&$form, &$form_state, $form_id) {
  /* Set default author information. */
  if (!preg_match("/^node_delete.+$/", $form_id)) {
    if (preg_match("/^node_.+form$/", $form_id)) {
      $nid = $form_state->getformObject()->getEntity()->id();
      if (is_null($nid)) {
        /* only on new nodes */
        $config = Drupal::config('etype.adminsettings');
        $uid = $config->get('author');
        $user = Drupal::currentUser();
        $roles = $user->getRoles();
        if ($uid > 0 && in_array_any(['administrator', 'editor'], $roles)) {
          $author = User::load($uid);
          $name = $author->getAccountName();
          $form['#attached']['drupalSettings']['etype']['author'] = $name . ' (' . $uid . ')';
          $form['#attached']['library'][] = 'etype/etype';
        }
      }
    }
  }

  /* Process Video Add form. */
  if ($form_id == "node_video_form") {
    if (isset ($form["field_mt_bg_video_youtube"])) {
      $form['#attached']['library'][] = 'etype/etype-video';
      $form["field_mt_bg_video_youtube"]["#prefix"] = "
<p><em>The next three fields only need to be filled out if \"Front Page Slideshow\" (under CUSTOM PUBLISHING OPTIONS) is checked. The defaults should work fine.</em></p>";
    }
  }
  /* Add default form css */
  $form['#attached']['library'][] = 'etype/form';
}

/**
 * Implements hook_user_login()
 *
 * @param $account
 * Set cookie by role for caching/proxy serving
 */
function etype_user_login($account) {
  $roles = Drupal::currentUser()->getRoles();
  $check = in_array_any([
    'administrator',
    'Editor',
    'editor',
    'Reporter'
  ], $roles);
  if ($check == 1) {
    setcookie('nocache', '1', 0, '/');
  } else {
    $check = in_array_any(['authenticated user'], $roles);
    if ($check == 1) {
      setcookie('nocache', '2', 0, '/');
    }
  }
}

/**
 * Implements hook_user_logout().
 * Remove nocache cookie
 */
function etype_user_logout() {
  // Set cookie in the past and then remove it.
  $request_time = Drupal::time()->getRequestTime();
  setcookie('nocache', '', $request_time - 3600, '/');
  unset($_COOKIE['nocache']);
}

/**
 * Helper to split string on word boundary.
 *
 * @param $text
 * @param $maxchar
 * @param string $end
 * @return string
 */
function substrwords($text, $maxchar, $end = '...'): string {
  if (strlen($text) > $maxchar || $text == '') {
    $words = preg_split('/\s/', $text);
    $output = '';
    $i = 0;
    while (1) {
      $length = strlen($output) + strlen($words[$i]);
      if ($length > $maxchar) {
        break;
      } else {
        $output .= " " . $words[$i];
        ++$i;
      }
    }
    $output .= $end;
  } else {
    $output = $text;
  }
  return $output;
}

/**
 * Helper function.
 *
 * @param $needles
 * @param $haystack
 * @return bool
 */
function in_array_any($needles, $haystack): bool {
  return (bool) (array_intersect($needles, $haystack));
}

/**
 * Get the fields associated with selected node type.
 *
 * @param $nodeType
 *   The node type for which to get fields.
 * @return array
 */
function getFields($nodeType): array {
  $fields["None"] = "None";
  if (!empty($nodeType)) {
    $entityManager = Drupal::service('entity_field.manager');
    $fieldDefinitions = $entityManager->getFieldDefinitions('node', $nodeType);
    foreach ($fieldDefinitions as $k => $v) {
      $fields[$k] = $k;
    }
  }
  return $fields;
}

/**
 * Customize RSS feed for apps.
 *
 * @param $variables
 *
 * See Drupal\etype\Plugin\views\row\EtypeRssFields
 */
function etype_preprocess_views_view_row_rss(&$variables) {
  $item = $variables['row'];
  if (isset($item->image)) {
    $variables['image'] = $item->image;
  }
}

/**
 * Alter meta tags.
 *
 * @param array $metatags
 *   The meta tags to be added to the page.
 * @param array $context
 *   The context for the current meta tags being generated. Will contain the
 *   following:
 *   'entity' - The entity being processed; passed by reference.
 *
 */
function etype_metatags_alter(array &$metatags, array &$context) {
  $node = Drupal::routeMatch()->getParameter('node');
  if (is_object($node)) {
    if ($node->hasField('field_image')) {
      $fileId = $node->get('field_image')->target_id;
      /* Do we have a file id? Default images do not register. */
      if ($fileId != NULL) {
        $obj = File::load($fileId);
        if (is_object($obj)) {
          $uri = $obj->getFileUri();
          $url = file_create_url($uri);
          /* Set the meta tags */
          $metatags['og_image'] = $url;
          $metatags['og_image_url'] = $url;
        }
      }
    }
  }
}

/**
 * Generates a machine name from a string.
 *
 * This is basically the same as what is done in
 * \Drupal\Core\Block\BlockBase::getMachineNameSuggestion() and
 * \Drupal\system\MachineNameController::transliterate(), but it seems
 * that so far there is no common service for handling this.
 *
 * @param string $string
 *
 * @return string
 *
 * @see \Drupal\Core\Block\BlockBase::getMachineNameSuggestion()
 * @see \Drupal\system\MachineNameController::transliterate()
 */
function etype_get_machine_name(string $string): string {
  $transliterated = \Drupal::transliteration()->transliterate($string, LanguageInterface::LANGCODE_DEFAULT, '_');
  $transliterated = mb_strtolower($transliterated);
  $transliterated = preg_replace('@[^a-z0-9_.]+@', '_', $transliterated);
  return $transliterated;
}
