<?php

use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 *
 * @throws \Exception
 */
function etype_commerce_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (strpos($form_id,
      'commerce_order_item_add_to_cart_form_commerce') !== false) {
    if (\Drupal::currentUser()->isAuthenticated()) {
      $user = User::load(\Drupal::currentUser()->id());
      $field_subscription_expiry = $user->get('field_subscription_expiry')
        ->getValue();
      if (isset($field_subscription_expiry[0]['value'])) {
        $myDateTime = new \DateTime();
        $subExpiry = new \DateTime($field_subscription_expiry[0]['value']);
        $days = $myDateTime->diff($subExpiry)->format('%R%a');
        if ($days > 0) {
          $message = 'Your subscription does not expire until ' . $subExpiry->format('l, jS F, Y') . '.';
        } else {
          $message = 'Your subscription expired on ' . $subExpiry->format('Y-m-d') . '.';
        }
        $form['#markup'] = $message;
      }
    }
    $form['email'] = [
      '#type' => 'textfield',
      '#title' => 'Gift recipientâ€™s email address',
      '#description' => 'If you are buying a gift subscription, please enter the email address of the recipient. They will be notified of the gift and invited to create an account.',
    ];
    $form['actions']['submit']['#value'] = t('Checkout');
    $form['actions']['submit']['#submit'][] = '_etype_commerce_redirect_to_checkout';
    $form['#attached']['library'][] = 'etype_commerce/login-form';
  }

  switch ($form_id) {
    case 'commerce_checkout_flow_multistep_default':
      $form['#attached']['library'][] = 'etype_commerce/login-form';
      break;
  }
}

/**
 * Callback for form submission.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * @see hook_form_alter()
 *
 */
function _etype_commerce_redirect_to_checkout(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\commerce_order\Entity\OrderInterface $cart_id */
  $cart_id = $form_state->get('cart_id');

  /* Is this a gift? */
  if ($_POST['purchased_entity'][0]['attributes']['attribute_gift'] == 10) {
    $gift_email = ($_POST['email']);
    // Create a gift subscription object.
    try {
      // Delete any entries with the same order id.
      // People should only be able to but 1 subscription at a a time.
      $query = \Drupal::entityQuery('gift_subscription')
        ->condition('order_id', $cart_id);
      $nids = $query->execute();
      foreach ($nids as $nid) {
        $entity = \Drupal::entityTypeManager()
          ->getStorage('gift_subscription')
          ->load($nid);
        $entity->delete();
      }
      /*
       * Add new gift subscription entity.
       * @todo Check that there is not already a gift subscription with this email.
       */
      $entity = \Drupal::entityTypeManager()
        ->getStorage('gift_subscription')
        ->create([
          'order_id' => $cart_id,
          'email' => $gift_email,
          'print' => $_POST['purchased_entity'][0]['attributes']['attribute_subscription_type'],
        ]);
      $entity->save();
    } catch (\Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException | PluginNotFoundException | EntityStorageException $e) {
      $message = 'Could not save gift subscription entity' . (int) $cart_id;
      \Drupal::logger('etype_commerce')->error($message);
    }
  }

  \Drupal::logger('etype_commerce')->info($cart_id);
  $url = Url::fromRoute('commerce_checkout.form',
    ['commerce_order' => $cart_id]
  );
  $form_state->setRedirectUrl($url);
}

/**
 * Implements etype_commerce_preprocess_page_title()
 *
 * @param $variables
 */
function etype_commerce_preprocess_page_title(&$variables) {
  $current_url = Url::fromRoute('<current>');
  $url = $current_url->getInternalPath();
  // Update Checkout page title.
  if(preg_match("/^checkout\/.*\/login/", $url)) {
    if (\Drupal::currentUser()->isAnonymous()) {
      $variables['title'] = 'Log in or create a new account to buy a subscription.';
    }
    else {
      $variables['title'] = 'Renew your subscription';
    }
  }
}

/**
 * Callback function for the cron job.
 *
 * @throws \Exception
 */
function _etype_commerce_expire_subscribers() {
  $job = new Drupal\etype_commerce\Controller\ExpireSubscribersController;
  $job->expireSubscribers();
}

/**
 * Implements hook_page_attachments().
 * css hides system login link.
 *
 * @param array $page
 */
function etype_commerce_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'etype_commerce/global-styling';
}

/**
 * @param UserInterface $account
 */
function etype_commerce_user_login(UserInterface $account) {
  /*
   * Check for gift Subscription.
   * If there is no sub expiry date then the gift sub has not been redeemed.
   */
  $field_subscription_expiry = $account->get('field_subscription_expiry')
    ->getValue();
  if (count($field_subscription_expiry) == 0) {
    /* There's no expiry date. */
    $printSub = '';
    $email = $account->getEmail();
    $query = \Drupal::entityQuery('gift_subscription')
      ->condition('email', $email);
    $ids = $query->execute();
    if (count($ids) > 0) {
      /* There is a matching gift sub for this email address. */
      /* Let's load the entity */
      try {
        $entity = \Drupal::entityTypeManager()
          ->getStorage('gift_subscription')
          ->load(reset($ids));
        $print = $entity->get('print')->getValue();
        $printSub = $print[0]['value'];
      }
      catch (InvalidPluginDefinitionException | PluginNotFoundException $e) {
        \Drupal::messenger()->addError('Could not retrieve Gift Subscription entity.');
      }

      /* Get the right role to add, add it and save user. */
      try {
        $entity = \Drupal::entityTypeManager()
          ->getStorage('commerce_product_attribute')
          ->load('subscription_type')
          ->getValues();
        $arr2 = $entity[$printSub]->name->getValue();
        $role = $arr2[0]['value'];
        switch ($role) {
          case 'Print & Digital Subscriber';
            $formatted_role = 'print_digital_subscriber';
            break;
          default:
            $formatted_role = 'digital_subscriber';
        }
        $account->addRole($formatted_role);
        $account->save();
      }
      catch (InvalidPluginDefinitionException | PluginNotFoundException | EntityStorageException $e) {
        \Drupal::messenger()->addError('Could not save Account entity.');
      }
    }
  }
}
