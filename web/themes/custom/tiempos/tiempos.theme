<?php

use Drupal\file\Entity\File;
use Drupal\taxonomy\Entity\Term;

/**
 * Preprocess html.
 *
 * @param $variables
 */
function tiempos_preprocess_html(&$variables) {
  $config = Drupal::config('etype.adminsettings');
  $variables['ad_script'] = $config->get('ad_script');

  /* Add domain to styles */
  $host = Drupal::request()->getHost();
  $tmp = explode(".", $host);
  $arr = array_filter($tmp);
  $arr[1] == 'etypegoogle7'? $variables["host"] = $arr[0]: $variables["host"] = $arr[1];
}

/**
 * Preprocess page.
 *
 * @param $variables
 */
function tiempos_preprocess_page(&$variables) {;
  if (Drupal::service('path.matcher')->isFrontPage()) {
    $variables['#attached']['library'][] = 'tiempos/front_page_sections';
    $variables['#attached']['library'][] = 'tiempos/special_sections';
  }
  $path = Drupal::service('path.current')->getPath();
  if (($path == "/classified") || (preg_match("/^\/taxonomy\/term\/.*$/", $path))) {
    $variables['#attached']['library'][] = 'tiempos/classified';
  }
}

/**
 * Preprocess Blocks.
 *
 * @param $variables
 */
function tiempos_preprocess_block(&$variables) {
  if (isset($variables['elements']['#id'])) {
    switch ($variables['elements']['#id']) {
      /* Add classes to some blocks. */
      case 'tiempos_page_title':
      case 'tiempos_content':
        $variables['attributes']['class'][] = 'is-full';
        break;

      case 'date':
        $variabless['#cache']['max-age'] = 0;
        break;
    }
  }
}

/**
 * Preprocess Nodes.
 *
 * @param $variables
 */
function tiempos_preprocess_node(&$variables) {
  $config = Drupal::config('etype.adminsettings');
  $variables['premium_content_message'] = $config->get('premium_content_message');
  $variables['premium_preview'] = $config->get('premium_preview');
  $variables['premium_content'] = $variables['node']->get('premium_content')->value;
  switch ($variables['node']->getType()) {
    case 'feature':
      $fid = theme_get_setting('inverted_logo');
      if ($fid[0] > 0) {
        $obj = File::load($fid[0]);
        if (is_object($obj)) {
          $inverted_logo = $obj->getFileUri();
          $variables["inverted_logo"] = file_create_url($inverted_logo);
        }
      }
      break;

    case 'article':
      $variables['section'] = '';
      $arr = [];
      $tids = $variables['node']->get('field_section')->getValue();
      if (count($tids) > 0) {
        foreach ($tids as $tid) {
          $term = Term::load($tid["target_id"]);
           $arr[] = strtolower($term->getName());
        }
        $variables['section'] = implode(" ", $arr);
      }
      break;
  }
}

/**
 * @inheritDoc
 *
 * @param $variables
 */
function tiempos_preprocess_input(&$variables) {
  /* Add bulma classes to form elements. */
  switch($variables['attributes']['type']) {
    case "submit":
      $variables['attributes']['class'][] = 'button';
      $variables['attributes']['class'][] = 'is-link';
      break;

    case "text":
    case "password":
    $variables['attributes']['class'][] = 'input';
  }

}

/**
 * Implements hook_theme_suggestions_page_alter().
 * Enables templates like page--article.html.twig.
 *
 * @param array $suggestions
 * @param array $variables
 */
function tiempos_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'page__' . $node->bundle();
  }
}

/**
 * Implements hook_theme_preprocess_username().
 *
 * @param $variables
 */
function tiempos_preprocess_username(&$variables) {
  $account = $variables['account'];
  $variables['extra'] = '';
  if (empty($account->uid)) {
    $variables['uid'] = 0;
    if (theme_get_setting('toggle_comment_user_verification')) {
      $variables['extra'] = ' (' . t('not verified') . ')';
    }
  }
  else {
    $variables['uid'] = (int) $account->uid;
  }

  // Set the name to a formatted name that is safe for printing and
  // that won't break tables by being too long. Keep an unshortened,
  // unsanitized version, in case other preprocess functions want to implement
  // their own shortening logic or add markup. If they do so, they must ensure
  // that $variables['name'] is safe for printing.
  $name = $variables['name_raw'] = format_username($account);
  if (drupal_strlen($name) > 30) {
    $name = drupal_substr($name, 0, 25) . '...';
  }
  $variables['name'] = check_plain($name);
  $variables['profile_access'] = user_access('access user profiles');
  $variables['link_attributes'] = array();

  // Populate link path and attributes if appropriate.
  if ($variables['uid'] && $variables['profile_access']) {

    // We are linking to a local user.
    $variables['link_attributes'] = array(
      'title' => t('View user profile.'),
    );
    $variables['link_path'] = 'user/' . $variables['uid'];
  }
  elseif (!empty($account->homepage)) {

    // Like the 'class' attribute, the 'rel' attribute can hold a
    // space-separated set of values, so initialize it as an array to make it
    // easier for other preprocess functions to append to it.
    $variables['link_attributes'] = array(
      'rel' => array(
        'nofollow',
      ),
    );
    $variables['link_path'] = $account->homepage;
    $variables['homepage'] = $account->homepage;
  }

  // We do not want the l() function to check_plain() a second time.
  $variables['link_options']['html'] = TRUE;

  // Set a default class.
  $variables['attributes_array'] = array(
    'class' => array(
      'username',
    ),
  );
}
