<?php

use Drupal\Core\Render\Markup;
use Drupal\file\Entity\File;
use Drupal\taxonomy\Entity\Term;
use Drupal\user\Entity\User;

/**
 * Preprocess html.
 *
 * @param $variables
 */
function tiempos_preprocess_html(&$variables) {
  /* Add domain to styles */
  $host = Drupal::request()->getHost();
  $arr = explode(".", $host);
  if (strpos($arr[1], 'etypegoogle') !== false) {
    $variables["host"] = $arr[0];
  } else {
    $variables["host"] = $arr[1];
  }
}

/**
 * Preprocess page.
 *
 * @param $variables
 */
function tiempos_preprocess_page(&$variables) {;
  if (Drupal::service('path.matcher')->isFrontPage()) {
    $variables['#attached']['library'][] = 'tiempos/imagesloaded';
    $variables['#attached']['library'][] = 'tiempos/front_page_sections';
    $variables['#attached']['library'][] = 'tiempos/special_sections';
  }
  $path = Drupal::service('path.current')->getPath();
  if (($path == "/classified") || (preg_match("/^\/taxonomy\/term\/.*$/", $path))) {
    $variables['#attached']['library'][] = 'tiempos/classified';
  }
}

/**
 * Preprocess Blocks.
 *
 * @param $variables
 */
function tiempos_preprocess_block(&$variables) {
  if (isset($variables['elements']['#id'])) {
    switch ($variables['elements']['#id']) {
      /* Add classes to some blocks. */
      case 'tiempos_page_title':
      case 'tiempos_content':
        $variables['attributes']['class'][] = 'is-full';
        break;

      case 'date':
        $variabless['#cache']['max-age'] = 0;
        break;
    }
  }
}

/**
 * Preprocess Nodes.
 *
 * @param $variables
 */
function tiempos_preprocess_node(&$variables) {
  $config = Drupal::config('etype.adminsettings');
  $authorLinksOff = $config->get('etype_author_links_off');

  switch ($variables['node']->getType()) {
    case 'feature':
      $fid = theme_get_setting('inverted_logo');
      if ($fid[0] > 0) {
        $obj = File::load($fid[0]);
        if (is_object($obj)) {
          $inverted_logo = $obj->getFileUri();
          $variables["inverted_logo"] = file_create_url($inverted_logo);
        }
      }
      break;

    case 'article':
      $variables['section'] = '';
      $arr = [];
      $tids = $variables['node']->get('field_section')->getValue();
      if (count($tids) > 0) {
        foreach ($tids as $tid) {
          $term = Term::load($tid["target_id"]);
          if (!is_null($term)) {
            $term_name = $term->getName();
            /* 'columns' is a class in bulma */
            if (strpos($term_name, 'Columns') === false) {
              $arr[] = strtolower($term_name);
            }
          }
        }
        $variables['section'] = implode(" ", $arr);
      }
      break;
  }

  /*
   * Theming author name(s), to use multiple authors, and remove link.
   */
  if ($authorLinksOff == 1) {
    $uid = $variables['node']->getOwnerId();
    $author = User::load($uid);
    $variables['author_name'] = $author->getUsername();
  }
  if ($variables['node']->hasField('field_authors')) {
    $authors = $variables['node']->get('field_authors')->getValue();
    if (count($authors) > 0) {
      $arr = [];
      foreach($authors as $item) {
        $author = User::load($item['target_id']);
        if ($authorLinksOff == 1) {
          $arr[] = $author->getUsername();
        } else {
          $arr[] = '<a href="/user/' . $item['target_id'] .'">' .
            $author->getUsername() . '</a>';
        }
      }
      $variables['author_name'] = Markup::create(implode(" and ", $arr));
    }
  }
}

/**
 * @inheritDoc
 *
 * @param $variables
 */
function tiempos_preprocess_input(&$variables) {
  /* Add bulma classes to form elements. */
  switch($variables['attributes']['type']) {
    case "submit":
      $variables['attributes']['class'][] = 'button';
      $variables['attributes']['class'][] = 'is-link';
      break;

    case "text":
    case "password":
      $variables['attributes']['class'][] = 'input';
      break;

    case "select":
      $variables['attributes']['class'][] = 'select';
      break;
  }

}

/**
 * Implements hook_theme_suggestions_page_alter().
 * Enables templates like page--article.html.twig.
 *
 * @param array $suggestions
 * @param array $variables
 */
function tiempos_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'page__' . $node->bundle();
  }
}
